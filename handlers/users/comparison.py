from loader import dp 
from aiogram import types
from keyboards.inline.choise_comparison import choise_inline_comparison
from keyboards.default import start_button, cancel_button
from tiker.functions_tiker import GeneraInformationOfCompany
from aiogram.dispatcher.storage import FSMContext
from states.states_comparison import Comparison
from middlewares.internationlization import _

sings = {
    'sector_of_company': _('–°–µ–∫—Ç–æ—Ä'),
    'isin_of_company': _('–ú–ò–ù —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥'),
    'market_cap_of_company': _('–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è'),
    'count_shares_ofustanding_of_company': _('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π'),
    'current_prise_share_now_of_company': _('–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏'),
    'profit_of_company_now': _('–û–±—â–∏–π –¥–æ—Ö–æ–¥'),
    'net_profit_of_company_now' : _('–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'),
    'total_assets_now': _('–ê–∫—Ç–∏–≤—ã'),
    'total_liab_now': _('–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'),
    'dividends_of_company_now_per_year_in_dollar': _('–î–∏–≤–∏–¥–µ–Ω–¥—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö'),
    'dividends_of_company_now_per_year_in_persent': _('–î–∏–≤–∏–¥–µ–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö'),
    'eps_of_company': _('–ü—Ä–∏–±—ã–ª—å –Ω–∞ –∞–∫—Ü–∏—é'),
    'pe_ratio_of_company': _('–¶–µ–Ω–∞\–ø—Ä–∏–±—ã–ª—å'),
}

@dp.callback_query_handler(text='cancel', state=[Comparison.enter_the_tickers, Comparison.enter_the_attribute])
async def cancel_operation(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(text=_('–û—Ç–º–µ–Ω–∞'), reply_markup=start_button)
    await state.finish()

@dp.message_handler(text=_('–ù–∞–∑–∞–¥ \U0001F448'), state=[Comparison.enter_the_tickers, Comparison.enter_the_attribute])
async def cancel_operation(message: types.Message, state: FSMContext):
    await message.answer(text=_('–û—Ç–º–µ–Ω–∞'), reply_markup=start_button)
    await state.finish()

@dp.message_handler(text=_('–°—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ üßê'))
async def enter_the_attribute(message: types.Message):
    await message.answer(text=_('–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å?'), reply_markup=choise_inline_comparison)
    await Comparison.enter_the_attribute.set()

@dp.callback_query_handler(state=Comparison.enter_the_attribute)
async def enter_the_tickers(call: types.CallbackQuery, state: FSMContext):
    global attribute_of_comparison, msg_id
    attribute_of_comparison = call.data
    await call.message.edit_reply_markup()
    await state.update_data(attribute = call.data)
    await dp.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    msg = await call.message.answer(text=_('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç: "{attr}" \n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)').format(attr=str(sings[attribute_of_comparison])), reply_markup=cancel_button)
    msg_id = msg.message_id
    await Comparison.enter_the_tickers.set()

@dp.message_handler(state=Comparison.enter_the_tickers)
async def enter_the_comparison(message: types.Message, state: FSMContext):
    await state.update_data(tickers = message.text)
    data = await state.get_data()
    attribute = data.get('attribute')
    tickers = data.get('tickers')
    errors_ticker = ''
    answer_user = _('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É: "{attr}"').format(attr=str(sings[attribute_of_comparison])) + '\n' 
    await dp.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    msg = await message.answer(text=_('–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...\n–ú–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –¥–æ 30 —Å–µ–∫—É–Ω–¥'))
    for ticker in tickers.split(' '):
        ticker = str(ticker).upper()
        try:
            information_comparison = GeneraInformationOfCompany(ticker).__getattribute__(attribute)
        except KeyError:
            errors_ticker += ticker + ', '
            continue
        answer_user += ticker + ': ' + str(information_comparison) + '\n'
    await dp.bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
    await message.answer(text=answer_user, reply_markup=start_button)
    if len(errors_ticker) != 0:
        await message.answer(text=_('–û—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {errors_ticker}').format(errors_ticker=errors_ticker))
    await state.finish()
    